#include "%TaskFile%"

#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <cctype>
#include <ctime>

namespace jhelper {

struct Test {
    std::string input;
    std::string output;
    bool active;
    bool has_output;
};

bool check(std::string expected, std::string actual) {
    while(!expected.empty() && isspace(*--expected.end()))
        expected.erase(--expected.end());
    while(!actual.empty() && isspace(*--actual.end()))
        actual.erase(--actual.end());
    return expected == actual;
}

} // namespace jhelper

signed main() {
    std::vector<jhelper::Test> tests = {
        %Tests%
    };
    for (int i = 0; i < %ClassName%::kStressIterations; ++i) {
        std::ostringstream generated_test;
        %ClassName%::generateTest(generated_test);
        tests.push_back({generated_test.str(), "", true, false});
    }
    bool allOK = true;
    int testID = 0;
    std::cout << std::fixed;
    double maxTime = 0.0;
    std::cout << std::endl;
    for(const jhelper::Test& test: tests ) {
        std::cout << "\033[4m" << "Test #" << ++testID << "\033[m" << std::endl;
        std::cout << "Input: \n" << test.input << std::endl;
        if (test.active) {
            std::stringstream in(test.input), in2(test.input);
            std::ostringstream out, out2;
            std::clock_t start = std::clock();
            %ClassName% solver;
            %SolverCall%
            std::clock_t finish = std::clock();
            double currentTime = double(finish - start) / CLOCKS_PER_SEC;
            maxTime = std::max(currentTime, maxTime);
            solver.validate(in2, out2);
            std::cout << "Actual output: \n" << out.str() << std::endl;
            std::cout << "Expected output: \n" << out2.str() << std::endl;
            bool result = jhelper::check(out.str(), out2.str());
            allOK = allOK && result;

            std::cout << "Time: " << currentTime << std::endl;
            if (result) {
                std::cout << "Result: " << "\033[32m OK \033[m" << std::endl;
            }
            else {
                std::cout << "\033[31m" << "Found a failed case!!" << "\033[m"<< std::endl;
                return;
            }
        }
        else {
            std::cout << "SKIPPED\n";
        }

        std::cout << std::endl;
    }
    if(allOK) {
        std::cout << "\033[32m" << "All OK" << "\033[m"<< std::endl;
    }
    else {
        std::cout << "\033[31m" << "Some cases failed" << "\033[m"<< std::endl;
    }
    std::cout << "Maximal time: " << maxTime << "s." << std::endl;
    return 0;
}
